#pragma once
#include "BmpHeader.h"
#include "ImageData.h"
#include "Point.h"
#include <array>
#include <cmath>
#include <vector>
#include <algorithm>
#include <numbers>

using std::numbers::pi_v;
using std::vector;
using std::array;

inline float Frac(float x) noexcept
{
	return x - int32_t(x);
}

inline array<uint8_t, 3> NearestNeighbor(
	const Point& p1,
	const ImageData& image)
{
	float x = round(p1.x);
	float y = round(p1.y);

	return array<uint8_t, 3>
	{
		image(x, y, 0), image(x, y, 1), image(x, y, 2),
	};
}


// 0 <= x <= 1
inline float Lerp(
	float x,
	float f0,
	float f1) noexcept
{
	return (1 - x) * f0 + x * f1;
}

inline array<uint8_t, 3> BiLerp(
	const Point& p1,
	const ImageData& image) noexcept
{
	array<uint8_t, 3> result{};
	float x = Frac(p1.x);
	float y = Frac(p1.y);

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		float l1 = Lerp(
			y,
			image(p1.x, p1.y, colorOffset),
			image(p1.x, ceil(p1.y), colorOffset)
		);

		float l2 = Lerp(
			y,
			image(ceil(p1.x), p1.y, colorOffset),
			image(ceil(p1.x), ceil(p1.y), colorOffset)
		);

		result[colorOffset] = (uint8_t)(
			std::clamp(
				Lerp(x, l1, l2) + 1.f,
				0.f,
				255.f)
			);
	}

	return result;
}

// 0 <= x <= 1
inline float Cubic(
	float x,
	float f0,
	float f1,
	float f2,
	float f3) noexcept
{
	return f1 + 0.5f * x * (f2 - f0 + x * (2.0f * f0 - 5.0f * f1 + 4.0f * f2 - f3 + x * (3.0f * (f1 - f2) + f3 - f0)));
}

inline array<uint8_t, 3> BiCubic(
	const Point& p1,
	const ImageData& image) noexcept
{
	// Координаты точки p.1 в дополненном изображении
	float realX = p1.x + image.GetExtendedPxCount();
	float realY = p1.y + image.GetExtendedPxCount();

	int xm1 = floor(realX - 1);	// x_-1
	int x0 = floor(realX);		// x_0
	int x1 = ceil(realX);		// x_1
	int x2 = ceil(realX + 1);	// x_2

	array<int, 4> yCoords{
		floor(realY - 1),	// y_-1
		floor(realY),		// y_0
		ceil(realY),		// y_1
		ceil(realY + 1)		// y_2
	};

	array<uint8_t, 3> result{};
	array<float, 4> bCoefs{};
	float fracX = Frac(p1.x);
	float fracY = Frac(p1.y);

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		for (size_t i = 0; i < 4; i++)
		{
			bCoefs[i] = Cubic(
				fracX,
				image(xm1, yCoords[i], colorOffset),
				image(x0, yCoords[i], colorOffset),
				image(x1, yCoords[i], colorOffset),
				image(x2, yCoords[i], colorOffset)
			);
		}

		result[colorOffset] = (uint8_t)(
			std::clamp(
				Cubic(
					fracY,
					bCoefs[0],
					bCoefs[1],
					bCoefs[2],
					bCoefs[3]
				) + 1.f,
				0.f,
				255.f)
			);
	}

	return result;
}


inline float Sinc(float x) noexcept
{
	return sin(x * pi_v<float>) / (x * pi_v<float>);
}

inline float LanczosKernel(float x, int a) noexcept
{
	if (abs(x) < 1e-5)
	{
		return 1.f;
	}

	if (x >= -a && x <= a)
	{
		return Sinc(x) * Sinc(x / a);
	}

	return 0.f;
}

// Таблицы функции LanczosKernel
// Для a = 2 с шагом 0.01 на отрезке [-2; 2]
array<float, 401> Lanczos2Weights
{
	-7.74372e-16, -2.52464e-05, -0.000101946, -0.000231475, -0.000415124, -0.000654088, -0.000949464, -0.00130226, -0.00171337, -0.00218357, -0.00271354, -0.00330384, -0.00395489, -0.00466701, -0.00544039, -0.00627506, -0.00717095, -0.00812785, -0.00914536, -0.010223, -0.0113602, -0.012556, -0.0138096, -0.0151199, -0.0164855, -0.0179051, -0.0193772, -0.0209001, -0.0224718, -0.0240903, -0.0257535, -0.027459, -0.0292043, -0.0309868, -0.0328037, -0.0346519, -0.0365285, -0.0384301, -0.0403533, -0.0422945, -0.0442501, -0.0462162, -0.0481889, -0.0501639, -0.0521371, -0.0541041, -0.0560604, -0.0580014, -0.0599222, -0.0618182, -0.0636843, -0.0655154, -0.0673065, -0.0690523, -0.0707475, -0.0723868, -0.0739645, -0.0754753, -0.0769135, -0.0782734, -0.0795496, -0.0807361, -0.0818273, -0.0828174, -0.0837007, -0.0844713, -0.0851235, -0.0856516, -0.0860497, -0.0863123, -0.0864335, -0.0864078, -0.0862295, -0.0858933, -0.0853935, -0.0847249, -0.0838821, -0.0828599, -0.0816534, -0.0802574, -0.0786672, -0.076878, -0.0748852, -0.0726843, -0.0702712, -0.0676417, -0.0647917, -0.0617176, -0.0584157, -0.0548827, -0.0511152, -0.0471104, -0.0428654, -0.0383777, -0.0336449, -0.0286649, -0.0234359, -0.0179562, -0.0122245, -0.00623954, -6.45792e-07, 0.00649292, 0.0132414, 0.020245, 0.0275033, 0.0350159, 0.0427819, 0.0508005, 0.0590702, 0.0675892, 0.0763558, 0.0853677, 0.0946223, 0.104117, 0.113848, 0.123813, 0.134008, 0.144428, 0.15507, 0.165929, 0.177, 0.188277, 0.199757, 0.211432, 0.223297, 0.235345, 0.247571, 0.259967, 0.272526, 0.285242, 0.298106, 0.311111, 0.324248, 0.33751, 0.350889, 0.364375, 0.377959, 0.391634, 0.405388, 0.419214, 0.433102, 0.447041, 0.461022, 0.475035, 0.48907, 0.503117, 0.517164, 0.531203, 0.545222, 0.55921, 0.573157, 0.587053, 0.600886, 0.614645, 0.628321, 0.641901, 0.655376, 0.668734, 0.681965, 0.695057, 0.708001, 0.720786, 0.7334, 0.745835, 0.758078, 0.770121, 0.781953, 0.793564, 0.804944, 0.816083, 0.826973, 0.837603, 0.847965, 0.85805, 0.867848, 0.877353, 0.886554, 0.895445, 0.904017, 0.912263, 0.920176, 0.927748, 0.934974, 0.941846, 0.948359, 0.954507, 0.960285, 0.965687, 0.970708, 0.975344, 0.979591, 0.983445, 0.986903, 0.989961, 0.992617, 0.994869, 0.996714, 0.998151, 0.999178, 0.999794, 1, 0.999794, 0.999178, 0.998151, 0.996714, 0.99487, 0.992618, 0.989962, 0.986904, 0.983446, 0.979592, 0.975345, 0.970709, 0.965688, 0.960287, 0.954509, 0.948362, 0.941848, 0.934976, 0.927751, 0.920178, 0.912265, 0.904019, 0.895447, 0.886557, 0.877356, 0.867851, 0.858053, 0.847968, 0.837606, 0.826976, 0.816087, 0.804947, 0.793567, 0.781957, 0.770125, 0.758082, 0.745839, 0.733405, 0.72079, 0.708005, 0.695062, 0.681969, 0.668738, 0.65538, 0.641906, 0.628325, 0.61465, 0.60089, 0.587057, 0.573162, 0.559214, 0.545226, 0.531207, 0.517169, 0.503121, 0.489075, 0.47504, 0.461026, 0.447045, 0.433106, 0.419219, 0.405393, 0.391638, 0.377964, 0.364379, 0.350893, 0.337515, 0.324252, 0.311115, 0.29811, 0.285246, 0.27253, 0.259971, 0.247575, 0.235349, 0.223301, 0.211435, 0.19976, 0.188281, 0.177003, 0.165932, 0.155073, 0.144432, 0.134011, 0.123816, 0.113851, 0.10412, 0.0946253, 0.0853706, 0.0763587, 0.067592, 0.0590728, 0.0508032, 0.0427845, 0.0350183, 0.0275056, 0.0202472, 0.0132436, 0.00649508, 1.4317e-06, -0.00623759, -0.0122226, -0.0179544, -0.0234341, -0.0286632, -0.0336433, -0.0383762, -0.042864, -0.0471091, -0.0511139, -0.0548815, -0.0584146, -0.0617166, -0.0647908, -0.0676408, -0.0702704, -0.0726836, -0.0748845, -0.0768773, -0.0786666, -0.0802569, -0.081653, -0.0828596, -0.0838818, -0.0847246, -0.0853933, -0.0858931, -0.0862295, -0.0864078, -0.0864335, -0.0863123, -0.0860498, -0.0856517, -0.0851237, -0.0844715, -0.0837009, -0.0828177, -0.0818276, -0.0807365, -0.0795499, -0.0782739, -0.0769139, -0.0754757, -0.073965, -0.0723873, -0.0707481, -0.0690529, -0.0673071, -0.065516, -0.0636849, -0.0618188, -0.0599228, -0.058002, -0.056061, -0.0541048, -0.0521378, -0.0501646, -0.0481895, -0.0462169, -0.0442508, -0.0422952, -0.0403539, -0.0384307, -0.0365291, -0.0346525, -0.0328043, -0.0309874, -0.0292049, -0.0274595, -0.025754, -0.0240908, -0.0224723, -0.0209006, -0.0193777, -0.0179056, -0.0164859, -0.0151203, -0.01381, -0.0125564, -0.0113605, -0.0102234, -0.00914571, -0.00812816, -0.00717125, -0.00627534, -0.00544064, -0.00466725, -0.00395511, -0.00330403, -0.00271372, -0.00218373, -0.00171351, -0.00130239, -0.000949572, -0.000654173, -0.000415191, -0.000231525, -0.000101979, -2.52626e-05, -2.452e-12,
};

// Для a = 3 с шагом 0.01 на отрезке [-3; 3]
array<float, 601> Lanczos3Weights
{
	7.04186e-17, 1.11835e-05, 4.50098e-05, 0.000101862, 0.000182081, 0.000285962, 0.000413756, 0.000565669, 0.00074186, 0.000942435, 0.00116746, 0.00141693, 0.00169081, 0.00198902, 0.00231139, 0.00265772, 0.00302777, 0.00342122, 0.00383772, 0.00427683, 0.00473807, 0.00522094, 0.00572482, 0.00624909, 0.00679304, 0.00735591, 0.00793691, 0.00853515, 0.00914974, 0.00977968, 0.010424, 0.0110815, 0.0117512, 0.0124318, 0.0131222, 0.013821, 0.0145269, 0.0152386, 0.0159546, 0.0166735, 0.0173938, 0.0181139, 0.0188323, 0.0195473, 0.0202574, 0.0209608, 0.0216558, 0.0223407, 0.0230137, 0.0236731, 0.024317, 0.0249437, 0.0255513, 0.0261378, 0.0267016, 0.0272407, 0.0277532, 0.0282372, 0.028691, 0.0291126, 0.0295001, 0.0298518, 0.0301657, 0.0304401, 0.0306731, 0.030863, 0.031008, 0.0311064, 0.0311566, 0.0311567, 0.0311053, 0.0310007, 0.0308415, 0.0306261, 0.0303531, 0.0300211, 0.0296289, 0.029175, 0.0286585, 0.0280781, 0.0274327, 0.0267215, 0.0259434, 0.0250977, 0.0241836, 0.0232004, 0.0221476, 0.0210247, 0.0198312, 0.0185669, 0.0172316, 0.0158252, 0.0143476, 0.012799, 0.0111795, 0.00948955, 0.00772945, 0.00589977, 0.00400115, 0.00203433, 1.9979e-07, -0.00210027, -0.00426599, -0.0064957, -0.00878813, -0.0111418, -0.0135551, -0.0160265, -0.0185539, -0.0211357, -0.0237696, -0.0264535, -0.0291852, -0.0319622, -0.034782, -0.037642, -0.0405394, -0.0434714, -0.046435, -0.049427, -0.0524443, -0.0554836, -0.0585415, -0.0616145, -0.0646989, -0.067791, -0.070887, -0.073983, -0.077075, -0.080159, -0.0832307, -0.086286, -0.0893204, -0.0923296, -0.0953092, -0.0982546, -0.101161, -0.104024, -0.106839, -0.109601, -0.112305, -0.114947, -0.117521, -0.120023, -0.122448, -0.12479, -0.127046, -0.129209, -0.131274, -0.133238, -0.135095, -0.136839, -0.138466, -0.139972, -0.14135, -0.142597, -0.143707, -0.144675, -0.145498, -0.146169, -0.146685, -0.147041, -0.147233, -0.147255, -0.147104, -0.146776, -0.146266, -0.14557, -0.144685, -0.143606, -0.14233, -0.140854, -0.139173, -0.137284, -0.135185, -0.132871, -0.130341, -0.127592, -0.12462, -0.121424, -0.118001, -0.114349, -0.110466, -0.106351, -0.102001, -0.0974155, -0.0925932, -0.087533, -0.0822341, -0.0766958, -0.0709178, -0.0648998, -0.0586417, -0.0521438, -0.0454064, -0.0384301, -0.0312157, -0.0237644, -0.0160773, -0.00815576, -1.59204e-06, 0.00838336, 0.016997, 0.0258369, 0.0349007, 0.0441855, 0.0536884, 0.0634062, 0.0733354, 0.0834726, 0.0938138, 0.104355, 0.115092, 0.12602, 0.137135, 0.148431, 0.159905, 0.17155, 0.18336, 0.195331, 0.207457, 0.219731, 0.232148, 0.2447, 0.257382, 0.270187, 0.283108, 0.296137, 0.309269, 0.322495, 0.335807, 0.3492, 0.362664, 0.376192, 0.389776, 0.403408, 0.41708, 0.430783, 0.44451, 0.458251, 0.471999, 0.485745, 0.49948, 0.513195, 0.526883, 0.540533, 0.554138, 0.567688, 0.581175, 0.59459, 0.607924, 0.621168, 0.634314, 0.647352, 0.660274, 0.673071, 0.685735, 0.698257, 0.710628, 0.72284, 0.734885, 0.746754, 0.758439, 0.769931, 0.781223, 0.792308, 0.803176, 0.813821, 0.824235, 0.834411, 0.844341, 0.854018, 0.863436, 0.872587, 0.881465, 0.890065, 0.898379, 0.906401, 0.914126, 0.921549, 0.928663, 0.935464, 0.941947, 0.948107, 0.953939, 0.959439, 0.964604, 0.969429, 0.973912, 0.978047, 0.981834, 0.985268, 0.988348, 0.99107, 0.993434, 0.995437, 0.997078, 0.998356, 0.999269, 0.999817, 1, 0.999817, 0.999269, 0.998356, 0.997079, 0.995438, 0.993435, 0.991072, 0.988349, 0.98527, 0.981836, 0.97805, 0.973914, 0.969432, 0.964607, 0.959442, 0.953942, 0.94811, 0.94195, 0.935468, 0.928667, 0.921553, 0.91413, 0.906405, 0.898383, 0.890069, 0.88147, 0.872592, 0.86344, 0.854023, 0.844346, 0.834416, 0.824241, 0.813827, 0.803182, 0.792313, 0.781229, 0.769937, 0.758444, 0.74676, 0.734891, 0.722847, 0.710635, 0.698264, 0.685742, 0.673078, 0.660281, 0.647359, 0.63432, 0.621175, 0.607931, 0.594597, 0.581182, 0.567695, 0.554145, 0.54054, 0.52689, 0.513202, 0.499487, 0.485752, 0.472006, 0.458258, 0.444517, 0.43079, 0.417087, 0.403415, 0.389783, 0.376199, 0.362671, 0.349207, 0.335814, 0.322501, 0.309275, 0.296144, 0.283114, 0.270194, 0.257389, 0.244707, 0.232154, 0.219738, 0.207463, 0.195338, 0.183366, 0.171556, 0.159911, 0.148437, 0.137141, 0.126026, 0.115097, 0.10436, 0.0938192, 0.0834779, 0.0733406, 0.0634112, 0.0536933, 0.0441904, 0.0349054, 0.0258415, 0.0170014, 0.00838768, 2.61298e-06, -0.00815161, -0.0160732, -0.0237605, -0.031212, -0.0384265, -0.0454029, -0.0521403, -0.0586384, -0.0648966, -0.0709148, -0.076693, -0.0822313, -0.0875303, -0.0925907, -0.0974131, -0.101999, -0.106349, -0.110464, -0.114347, -0.117999, -0.121422, -0.124619, -0.127591, -0.13034, -0.13287, -0.135184, -0.137283, -0.139172, -0.140853, -0.14233, -0.143606, -0.144685, -0.14557, -0.146266, -0.146776, -0.147104, -0.147255, -0.147233, -0.147041, -0.146685, -0.146169, -0.145498, -0.144676, -0.143707, -0.142597, -0.141351, -0.139972, -0.138467, -0.13684, -0.135096, -0.133239, -0.131276, -0.12921, -0.127047, -0.124792, -0.122449, -0.120025, -0.117523, -0.114949, -0.112307, -0.109603, -0.106841, -0.104026, -0.101163, -0.0982561, -0.0953107, -0.0923312, -0.089322, -0.0862875, -0.0832323, -0.0801606, -0.0770766, -0.0739846, -0.0708885, -0.0677925, -0.0647004, -0.061616, -0.0585431, -0.0554852, -0.0524459, -0.0494285, -0.0464365, -0.0434729, -0.0405409, -0.0376435, -0.0347835, -0.0319636, -0.0291866, -0.0264549, -0.023771, -0.021137, -0.0185553, -0.0160278, -0.0135564, -0.011143, -0.00878933, -0.00649686, -0.00426709, -0.00210134, -8.35777e-07, 0.00203333, 0.00400018, 0.00589883, 0.00772855, 0.00948868, 0.0111787, 0.0127982, 0.0143469, 0.0158245, 0.0172309, 0.0185663, 0.0198306, 0.0210241, 0.022147, 0.0231999, 0.0241831, 0.0250973, 0.025943, 0.0267211, 0.0274324, 0.0280778, 0.0286582, 0.0291748, 0.0296286, 0.0300209, 0.0303529, 0.030626, 0.0308414, 0.0310007, 0.0311053, 0.0311567, 0.0311566, 0.0311065, 0.0310081, 0.0308631, 0.0306732, 0.0304402, 0.0301658, 0.0298519, 0.0295003, 0.0291128, 0.0286912, 0.0282375, 0.0277534, 0.0272409, 0.0267019, 0.0261381, 0.0255516, 0.024944, 0.0243174, 0.0236734, 0.0230141, 0.022341, 0.0216561, 0.0209611, 0.0202577, 0.0195477, 0.0188326, 0.0181142, 0.0173941, 0.0166739, 0.015955, 0.0152389, 0.0145273, 0.0138213, 0.0131225, 0.0124322, 0.0117515, 0.0110818, 0.0104243, 0.00978, 0.00915004, 0.00853545, 0.0079372, 0.00735619, 0.00679331, 0.00624935, 0.00572507, 0.00522118, 0.00473831, 0.00427705, 0.00383793, 0.00342142, 0.00302797, 0.0026579, 0.00231156, 0.00198917, 0.00169096, 0.00141706, 0.00116758, 0.000942543, 0.000741956, 0.000565753, 0.000413827, 0.00028602, 0.000182126, 0.000101896, 4.50321e-05, 1.11946e-05, 2.6539e-12,
};

template <int a = 3>
inline array<uint8_t, 3> LanczosInterpolation(
	const Point& p1,
	const ImageData& image
) noexcept
{
	array<uint8_t, 3> result{};
	array<float, a * 2> convolutedRows{};
	int startIndexX = floor(p1.x) - a + 1;
	int endIndexX = ceil(p1.x) + a - 1;
	int startIndexY = floor(p1.y) - a + 1;
	int endIndexY = ceil(p1.y) + a - 1;

	// Заранее вычисление весов ядра по X и их суммы
	// для нормировки 
	float weightSumX = 0;
	array<float, a * 2> weightsX{};
	for (size_t x = startIndexX; x <= endIndexX; x++)
	{
		float weightX = Lerp(
			Frac(p1.x - x), 
			Lanczos3Weights[floor((p1.x - x + a) * 100)], 
			Lanczos3Weights[ceil((p1.x - x + a) * 100)]
		);
		weightSumX += weightX;
		weightsX[x - startIndexX] = weightX;
	}

	// То же самое по Y
	float weightSumY = 0;
	array<float, a * 2> weightsY{};
	for (size_t y = startIndexY; y <= endIndexY; y++)
	{
		float weightY = Lerp(
			Frac(p1.y - y),
			Lanczos3Weights[floor((p1.y - y + a) * 100)],
			Lanczos3Weights[ceil((p1.y - y + a) * 100)]
		);
		weightSumY += weightY;
		weightsY[y - startIndexY] = weightY;
	}

	for (size_t colorOffset = 0; colorOffset < 3; colorOffset++)
	{
		// Свёртка по X
		for (size_t y = startIndexY; y <= endIndexY; y++)
		{
			for (size_t x = startIndexX; x <= endIndexX; x++)
			{
				convolutedRows[y - startIndexY] +=
					image(x, y, colorOffset) * weightsX[x - startIndexX];
			}
			convolutedRows[y - startIndexY] /= weightSumX;
		}

		// Свёртка по Y
		float convolutionResult = 0.f;
		for (size_t y = startIndexY; y <= endIndexY; y++)
		{
			convolutionResult +=
				convolutedRows[y - startIndexY] * weightsY[y - startIndexY];
		}

		result[colorOffset] = (uint8_t)std::clamp(
			convolutionResult / weightSumY + 1.f,
			0.f,
			255.f
		);

		std::fill(convolutedRows.begin(), convolutedRows.end(), 0.f);
	}

	return result;
}

inline array<uint8_t, 3> Lanczos2(
	const Point& p1,
	const ImageData& image) noexcept
{
	Point realP1(
		p1.x + image.GetExtendedPxCount(),
		p1.y + image.GetExtendedPxCount()
	);

	return LanczosInterpolation<2>(realP1, image);
}

inline array<uint8_t, 3> Lanczos3(
	const Point& p1,
	const ImageData& image) noexcept
{
	Point realP1(
		p1.x + image.GetExtendedPxCount(),
		p1.y + image.GetExtendedPxCount()
	);

	return LanczosInterpolation(realP1, image);
}